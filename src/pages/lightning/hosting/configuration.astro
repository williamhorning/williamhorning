---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';
---

<StarlightPage frontmatter={{ title: 'Configuring Lightning', description: 'Learn how to configure Lightning with a custom configuration file.', tableOfContents: false }}>

<form>

  <h1>Configuring Lightning</h1>
  <p>Lightning is an extensible chat bot which has a few options you can configure when hosting it. This page will let you make a <code>lightning.toml</code> file which you can use to setup the bot.</p>

  <h2>General Settings</h2>

  <h3>Prefix</h3>
  <p>The prefix is the character or string that will be used to trigger commands in Lightning. There's no default prefix, so you must set one.</p>
  <label for="prefix">Prefix</label>
  <input type="text" id="prefix" name="prefix" value="!" required />

  <h3>Log Level (optional)</h3>
  <p>The log level determines how much information Lightning will log. You can set it between <code>panic</code> and <code>trace</code>, with <code>info</code> being the default.</p>
  <label for="log_level">Log Level</label>
  <select id="log_level" name="log_level">
    <option value="4">Panic</option>
    <option value="3">Error</option>
    <option value="2">Warn</option>
    <option value="1" selected>Info</option>
    <option value="0">Debug</option>
    <option value="-1">Trace</option>
  </select>

  <h3>Error logging webhook (optional)</h3>
  <p>A Discord-compatible webhook URL where Lightning will send error logs.</p>
  <label for="error_webhook">Error Logging Webhook</label>
  <input type="url" id="error_webhook" name="error_webhook" placeholder="https://discord.com/api/webhooks/..." />

  <h2>Database Settings</h2>
  <p>Lightning supports multiple databases, with Redis and PostgreSQL as options.</p>

  <h3>Database type</h3>
  <p>Lightning can use either Redis or PostgreSQL as its database. You can select the database type below.</p>
  <label for="database_type">Database Type</label>
  <select id="database_type" name="database_type">
    <option value="redis">Redis</option>
    <option value="postgres">PostgreSQL</option>
  </select>

  <h3>Database connection</h3>
  <p>The connection string for the database you selected.</p>
  <p>For Redis, this is a hostname (and optionally a port), e.g. <code>localhost:6379</code>.</p>
  <p>For PostgreSQL, this is a standard <a href="https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING-URIS">PostgreSQL connection string</a>.</p>
  <label for="database_connection">Database Connection</label>
  <input type="text" id="database_connection" name="database_connection" placeholder="localhost:6379" required />

  <h2>Plugins</h2>

  <h3>Discord</h3>
  <p>To use Discord with Lightning, you'll first need to create a Discord bot at the <a href="https://discord.com/developers/applications">Discord Developer Portal</a> and enable the Message Content Intent.</p>
  <div>
    <label for="enable_discord">Enable Discord Plugin</label>
    <input type="checkbox" id="enable_discord" name="enable_discord" value="false" />
  </div>
  <label for="discord_token">Discord Bot Token</label>
  <input type="text" id="discord_token" name="discord_token" placeholder="your_bot_token" disabled />

  <h3>Guilded</h3>
  <p>To use Guilded with Lightning, you'll first need to create a Guilded bot and get its token.</p>
  <div>
    <label for="enable_guilded">Enable Guilded Plugin</label>
    <input type="checkbox" id="enable_guilded" name="enable_guilded" value="false" />
  </div>
  <label for="guilded_token">Guilded Bot Token</label>
  <input type="text" id="guilded_token" name="guilded_token" placeholder="your_bot_token" disabled />

  <h3>Revolt</h3>
  <p>To enable Revolt support for Lightning, you need to enable the plugin and provide a bot token.</p>
  <div>
    <label for="enable_revolt">Enable Revolt Plugin</label>
    <input type="checkbox" id="enable_revolt" name="enable_revolt" value="false" />
  </div>
  <label for="revolt_token">Revolt Bot Token</label>
  <input type="text" id="revolt_token" name="revolt_token" placeholder="your_bot_token" disabled />

  <h3>Telegram</h3>
  <p>To enable Telegram support for Lightning, you'll need to talk to <a href="https://t.me/botfather">@BotFather</a> on Telegram to create a bot and get its token. Additionally, you will need to expose the port provided at the URL for attachments sent from Telegram to work properly.</p>
  <div>
    <label for="enable_telegram">Enable Telegram Plugin</label>
    <input type="checkbox" id="enable_telegram" name="enable_telegram" value="false" />
  </div>
  <label for="telegram_token">Telegram Bot Token</label>
  <input type="text" id="telegram_token" name="telegram_token" placeholder="your_bot_token" disabled />
  <label for="telegram_proxy_port">Telegram Proxy Port</label>
  <input type="number" id="telegram_proxy_port" name="telegram_proxy_port" placeholder="8080" disabled />
  <label for="telegram_proxy_url">Telegram Proxy URL</label>
  <input type="url" id="telegram_proxy_url" name="telegram_proxy_url" placeholder="https://yourdomain.com/telegram" disabled />
  
  <h2>Generated Config</h2>

  <pre><code class="language-toml" id="config-output"></code></pre>
</form>

<script>
  const form = document.querySelector('form')!;
  const outputElement = document.querySelector('pre > code')!;

  const pluginToggles = {
    'enable_discord': ['discord_token'],
    'enable_guilded': ['guilded_token'],
    'enable_revolt': ['revolt_token'],
    'enable_telegram': ['telegram_token', 'telegram_proxy_port', 'telegram_proxy_url']
  };

  function generateConfig() {
    const data = new FormData(form);
    let config = [];

    const prefix = data.get('prefix');
    config.push(`prefix = "${prefix}"`);

    const errorWebhook = data.get('error_webhook');
    if (errorWebhook) {
      config.push(`error_url = "${errorWebhook}"`);
    } else {
      config.push('# error_url = "https://discord.com/api/webhooks/..."');
    }

    const logLevel = data.get('log_level');
    if (logLevel !== "1") {
      config.push(`log_level = ${logLevel}`);
    } else {
      config.push('log_level = 1 # Info');
    }

    config.push('');

    const dbType = data.get('database_type');
    const dbConn = data.get('database_connection');
    config.push('[database]');
    config.push(`type = '${dbType}'`);
    if (dbConn) {
      config.push(`connection = "${dbConn}"`);
    } else if (dbType === 'postgres') {
      config.push('# you MUST change this to your PostgreSQL connection string:');
      config.push('connection = "postgres://user:password@localhost:5432/dbname"');
    } else {
      config.push('# you MUST change this to your Redis connection string:');
      config.push('connection = "localhost:6379"');
    }
    config.push('');

    // Plugins
    if (data.get('enable_discord')) {
      const token = data.get('discord_token');
      config.push('[plugins.bolt-discord]');
      if (token) config.push(`token = "${token}"`);
      else config.push('token = "your_bot_token" # You MUST set this to your Discord bot token');
      config.push('');
    }

    if (data.get('enable_guilded')) {
      const token = data.get('guilded_token');
      config.push('[plugins.bolt-guilded]');
      if (token) config.push(`token = "${token}"`);
      else config.push('token = "your_bot_token" # You MUST set this to your Guilded bot token');
      config.push('');
    }

    if (data.get('enable_revolt')) {
      const token = data.get('revolt_token');
      config.push('[plugins.bolt-revolt]');
      if (token) config.push(`token = "${token}"`);
      else config.push('token = "your_bot_token" # You MUST set this to your Revolt bot token');
      config.push('');
    }

    if (data.get('enable_telegram')) {
      const token = data.get('telegram_token');
      const port = data.get('telegram_proxy_port');
      const url = data.get('telegram_proxy_url');
      config.push('[plugins.bolt-telegram]');
      if (token) config.push(`token = "${token}"`);
      else config.push('token = "your_bot_token" # You MUST set this to your Telegram bot token');
      if (port) config.push(`proxy_port = ${port}`);
      else config.push('proxy_port = 8080 # You MUST set this for attachment support');
      if (url) config.push(`proxy_url = "${url}"`);
      else config.push('proxy_url = "https://yourdomain.com/telegram" # You MUST set this for attachment support');
      config.push('');
    }

    outputElement.textContent = config.join('\n').trim();
  }

  function handleToggles() {
    const data = new FormData(form);
    for (const [checkboxId, inputIds] of Object.entries(pluginToggles)) {
      const isEnabled = !!data.get(checkboxId);
      inputIds.forEach(inputId => {
        const inputElement = document.getElementById(inputId) as HTMLInputElement;
        if (inputElement) {
          inputElement.disabled = !isEnabled;
        }
      });
    }
  }

  form.addEventListener('input', () => {
    handleToggles();
    generateConfig();
  });

  handleToggles();
  generateConfig();
</script>

<style>
form {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
  margin-block: 2rem 0;
}

form label {
  margin-top: 0.5rem;
  font-weight: 600;
  font-size: 0.9rem;
}

form input[type='text'],
form input[type='url'],
form input[type='number'],
form select {
  display: block;
  width: 100%;
  padding: 0.5rem 0.75rem;
  font-size: 1rem;
  color: var(--sl-color-text);
  background-color: var(--sl-color-bg-input, var(--sl-color-gray-6));
  border: 1px solid var(--sl-color-border, var(--sl-color-gray-5));
  border-radius: var(--sl-radius-m);
  transition: border-color 150ms ease-in-out, box-shadow 150ms ease-in-out;
}

form input[type='text']:focus,
form input[type='url']:focus,
form input[type='number']:focus,
form select:focus {
  outline: none;
  border-color: var(--sl-color-accent);
  box-shadow: 0 0 0 1px var(--sl-color-accent);
}

form input:disabled {
  background-color: var(--sl-color-gray-5);
  color: var(--sl-color-gray-3);
  cursor: not-allowed;
}

form label[for^='enable_'] {
  align-items: center;
  justify-content: space-between;
  font-weight: normal;
  margin-top: 1rem;
  cursor: pointer;
}

form input[type='checkbox'] {
  width: 1.25em;
  height: 1.25em;
  accent-color: var(--sl-color-accent);
  margin: 0 0 0 auto;
  cursor: pointer;
}

form pre {
  background-color: var(--sl-color-bg-code, var(--sl-color-gray-7));
  padding: 1rem;
  border-radius: var(--sl-radius-m);
  overflow-x: auto;
}

div:has(> input[type='checkbox']) {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-top: 1rem;
  width: 100%;
}

form input[type='checkbox'] {
  width: 1.25em;
  height: 1.25em;
  accent-color: var(--sl-color-accent);
  margin: 0;
  cursor: pointer;
}

/* Remove the margin-top from labels in checkbox containers */
div:has(> input[type='checkbox']) label {
  margin-top: 0;
  cursor: pointer;
}
</style>
</StarlightPage>